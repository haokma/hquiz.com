{"ast":null,"code":"import authApi from 'apis/authApi';\nimport { push } from 'connected-react-router';\nimport { toast } from 'react-toastify';\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { login, loginFail, loginSuccess, logout } from './authSlice';\n\nfunction* handleLogin(payload) {\n  try {\n    const res = yield call(authApi.login, payload.payload);\n    const {\n      data,\n      token,\n      refreshToken\n    } = res.data;\n    const user = {\n      role: data.role,\n      name: data.name,\n      email: data.email\n    };\n\n    if (data.role !== 'ADMIN') {\n      toast.error('Đăng nhập thất bại');\n      return;\n    }\n\n    localStorage.setItem('user', JSON.stringify(user));\n    localStorage.setItem('token', JSON.stringify(token));\n    localStorage.setItem('refreshToken', JSON.stringify(refreshToken));\n    yield put({\n      type: loginSuccess.type,\n      payload: user\n    });\n    yield put(push('/dashboard'));\n    toast.success('Đăng nhập thành công');\n  } catch (error) {\n    toast.error(error.response.data.error);\n    yield put({\n      type: loginFail.type\n    });\n  }\n}\n\nfunction* handleLogout() {\n  yield put(push('/login'));\n  localStorage.removeItem('token');\n  localStorage.removeItem('refreshToken');\n  localStorage.removeItem('user');\n  toast.success('Đăng xuẩt thành công');\n} // function* watchLoginFlow() {\n//   while (true) {\n//     const isLoggedIn = Boolean(localStorage.getItem('token'));\n//     if (!isLoggedIn) {\n//       const action = yield take(login.type);\n//       yield fork(handleLogin, action.payload);\n//     }\n//     yield take([logout.type]);\n//     yield call(handleLogout);\n//   }\n// }\n\n\nexport default function* authSaga() {\n  yield takeLatest(login.type, handleLogin);\n  yield takeLatest(logout.type, handleLogout);\n}","map":{"version":3,"sources":["/home/haopc/Desktop/Workspace/hquiz.com/CMS/src/features/Auth/authSaga.js"],"names":["authApi","push","toast","call","put","takeLatest","login","loginFail","loginSuccess","logout","handleLogin","payload","res","data","token","refreshToken","user","role","name","email","error","localStorage","setItem","JSON","stringify","type","success","response","handleLogout","removeItem","authSaga"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCC,MAAzC,QAAuD,aAAvD;;AAEA,UAAUC,WAAV,CAAsBC,OAAtB,EAA+B;AAC7B,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMT,IAAI,CAACH,OAAO,CAACM,KAAT,EAAgBK,OAAO,CAACA,OAAxB,CAAtB;AACA,UAAM;AAAEE,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,QAAgCH,GAAG,CAACC,IAA1C;AACA,UAAMG,IAAI,GAAG;AACXC,MAAAA,IAAI,EAAEJ,IAAI,CAACI,IADA;AAEXC,MAAAA,IAAI,EAAEL,IAAI,CAACK,IAFA;AAGXC,MAAAA,KAAK,EAAEN,IAAI,CAACM;AAHD,KAAb;;AAMA,QAAIN,IAAI,CAACI,IAAL,KAAc,OAAlB,EAA2B;AACzBf,MAAAA,KAAK,CAACkB,KAAN,CAAY,oBAAZ;AACA;AACD;;AACDC,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeR,IAAf,CAA7B;AACAK,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeV,KAAf,CAA9B;AACAO,IAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCC,IAAI,CAACC,SAAL,CAAeT,YAAf,CAArC;AACA,UAAMX,GAAG,CAAC;AACRqB,MAAAA,IAAI,EAAEjB,YAAY,CAACiB,IADX;AAERd,MAAAA,OAAO,EAAEK;AAFD,KAAD,CAAT;AAIA,UAAMZ,GAAG,CAACH,IAAI,CAAC,YAAD,CAAL,CAAT;AACAC,IAAAA,KAAK,CAACwB,OAAN,CAAc,sBAAd;AACD,GAtBD,CAsBE,OAAON,KAAP,EAAc;AACdlB,IAAAA,KAAK,CAACkB,KAAN,CAAYA,KAAK,CAACO,QAAN,CAAed,IAAf,CAAoBO,KAAhC;AACA,UAAMhB,GAAG,CAAC;AACRqB,MAAAA,IAAI,EAAElB,SAAS,CAACkB;AADR,KAAD,CAAT;AAGD;AACF;;AAED,UAAUG,YAAV,GAAyB;AACvB,QAAMxB,GAAG,CAACH,IAAI,CAAC,QAAD,CAAL,CAAT;AACAoB,EAAAA,YAAY,CAACQ,UAAb,CAAwB,OAAxB;AACAR,EAAAA,YAAY,CAACQ,UAAb,CAAwB,cAAxB;AACAR,EAAAA,YAAY,CAACQ,UAAb,CAAwB,MAAxB;AACA3B,EAAAA,KAAK,CAACwB,OAAN,CAAc,sBAAd;AACD,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAMzB,UAAU,CAACC,KAAK,CAACmB,IAAP,EAAaf,WAAb,CAAhB;AACA,QAAML,UAAU,CAACI,MAAM,CAACgB,IAAR,EAAcG,YAAd,CAAhB;AACD","sourcesContent":["import authApi from 'apis/authApi';\nimport { push } from 'connected-react-router';\nimport { toast } from 'react-toastify';\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { login, loginFail, loginSuccess, logout } from './authSlice';\n\nfunction* handleLogin(payload) {\n  try {\n    const res = yield call(authApi.login, payload.payload);\n    const { data, token, refreshToken } = res.data;\n    const user = {\n      role: data.role,\n      name: data.name,\n      email: data.email\n    };\n\n    if (data.role !== 'ADMIN') {\n      toast.error('Đăng nhập thất bại');\n      return;\n    }\n    localStorage.setItem('user', JSON.stringify(user));\n    localStorage.setItem('token', JSON.stringify(token));\n    localStorage.setItem('refreshToken', JSON.stringify(refreshToken));\n    yield put({\n      type: loginSuccess.type,\n      payload: user\n    });\n    yield put(push('/dashboard'));\n    toast.success('Đăng nhập thành công');\n  } catch (error) {\n    toast.error(error.response.data.error);\n    yield put({\n      type: loginFail.type\n    });\n  }\n}\n\nfunction* handleLogout() {\n  yield put(push('/login'));\n  localStorage.removeItem('token');\n  localStorage.removeItem('refreshToken');\n  localStorage.removeItem('user');\n  toast.success('Đăng xuẩt thành công');\n}\n// function* watchLoginFlow() {\n//   while (true) {\n//     const isLoggedIn = Boolean(localStorage.getItem('token'));\n//     if (!isLoggedIn) {\n//       const action = yield take(login.type);\n//       yield fork(handleLogin, action.payload);\n//     }\n//     yield take([logout.type]);\n//     yield call(handleLogout);\n//   }\n// }\n\nexport default function* authSaga() {\n  yield takeLatest(login.type, handleLogin);\n  yield takeLatest(logout.type, handleLogout);\n}\n"]},"metadata":{},"sourceType":"module"}