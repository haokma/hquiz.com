{"ast":null,"code":"var _jsxFileName = \"/home/haopc/Desktop/Workspace/hquiz.com/CMS/src/components/authentication/login/LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\nimport { Icon } from '@iconify/react'; // material\n\nimport { Checkbox, FormControlLabel, IconButton, InputAdornment, Link, Stack, TextField } from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab';\nimport { Form, FormikProvider, useFormik } from 'formik';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link as RouterLink } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { login } from 'features/Auth/authSlice'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginForm() {\n  _s();\n\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n  const loading = useSelector(state => state.auth.loading);\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: Yup.string().required('Password is required')\n  });\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      remember: true\n    },\n    validationSchema: LoginSchema,\n    onSubmit: async values => {\n      const action = login(values);\n      dispatch(action);\n    }\n  });\n  const {\n    errors,\n    touched,\n    values,\n    handleSubmit,\n    getFieldProps\n  } = formik;\n\n  const handleShowPassword = () => {\n    setShowPassword(show => !show);\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"username\",\n          type: \"email\",\n          label: \"Email address\",\n          ...getFieldProps('email'),\n          error: Boolean(touched.email && errors.email),\n          helperText: touched.email && errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"current-password\",\n          type: showPassword ? 'text' : 'password',\n          label: \"Password\",\n          ...getFieldProps('password'),\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: handleShowPassword,\n                edge: \"end\",\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  icon: showPassword ? eyeFill : eyeOffFill\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this)\n          },\n          error: Boolean(touched.password && errors.password),\n          helperText: touched.password && errors.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        direction: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        sx: {\n          my: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Checkbox, { ...getFieldProps('remember'),\n            checked: values.remember\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 22\n          }, this),\n          label: \"Remember me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          component: RouterLink,\n          variant: \"subtitle2\",\n          to: \"#\",\n          children: \"Forgot password?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n        fullWidth: true,\n        size: \"large\",\n        type: \"submit\",\n        variant: \"contained\",\n        loading: loading,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoginForm, \"caNM8SSKgNwE12tDzACJX3pK3JY=\", false, function () {\n  return [useDispatch, useSelector, useFormik];\n});\n\n_c = LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/home/haopc/Desktop/Workspace/hquiz.com/CMS/src/components/authentication/login/LoginForm.js"],"names":["eyeFill","eyeOffFill","Icon","Checkbox","FormControlLabel","IconButton","InputAdornment","Link","Stack","TextField","LoadingButton","Form","FormikProvider","useFormik","useState","useDispatch","useSelector","RouterLink","Yup","login","LoginForm","dispatch","showPassword","setShowPassword","loading","state","auth","LoginSchema","object","shape","email","string","required","password","formik","initialValues","remember","validationSchema","onSubmit","values","action","errors","touched","handleSubmit","getFieldProps","handleShowPassword","show","Boolean","endAdornment","my"],"mappings":"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","sourcesContent":["import eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\nimport { Icon } from '@iconify/react';\n// material\nimport {\n  Checkbox,\n  FormControlLabel,\n  IconButton,\n  InputAdornment,\n  Link,\n  Stack,\n  TextField\n} from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab';\nimport { Form, FormikProvider, useFormik } from 'formik';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link as RouterLink } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { login } from 'features/Auth/authSlice';\n// ----------------------------------------------------------------------\n\nexport default function LoginForm() {\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n  const loading = useSelector((state) => state.auth.loading);\n\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: Yup.string().required('Password is required')\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      remember: true\n    },\n    validationSchema: LoginSchema,\n    onSubmit: async (values) => {\n      const action = login(values);\n      dispatch(action);\n    }\n  });\n\n  const { errors, touched, values, handleSubmit, getFieldProps } = formik;\n\n  const handleShowPassword = () => {\n    setShowPassword((show) => !show);\n  };\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={3}>\n          <TextField\n            fullWidth\n            autoComplete=\"username\"\n            type=\"email\"\n            label=\"Email address\"\n            {...getFieldProps('email')}\n            error={Boolean(touched.email && errors.email)}\n            helperText={touched.email && errors.email}\n          />\n\n          <TextField\n            fullWidth\n            autoComplete=\"current-password\"\n            type={showPassword ? 'text' : 'password'}\n            label=\"Password\"\n            {...getFieldProps('password')}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton onClick={handleShowPassword} edge=\"end\">\n                    <Icon icon={showPassword ? eyeFill : eyeOffFill} />\n                  </IconButton>\n                </InputAdornment>\n              )\n            }}\n            error={Boolean(touched.password && errors.password)}\n            helperText={touched.password && errors.password}\n          />\n        </Stack>\n\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2 }}>\n          <FormControlLabel\n            control={<Checkbox {...getFieldProps('remember')} checked={values.remember} />}\n            label=\"Remember me\"\n          />\n\n          <Link component={RouterLink} variant=\"subtitle2\" to=\"#\">\n            Forgot password?\n          </Link>\n        </Stack>\n\n        <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={loading}>\n          Login\n        </LoadingButton>\n      </Form>\n    </FormikProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}